import os
import random
from uuid import uuid4
from pathlib import Path

from telegram import Update, User, InlineQueryResultPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")  
IMAGES_DIR = Path("images")  


GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

# —Ä–æ—Ç–∞—Ü–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
_queue: list[str] = []

def next_image() -> Path:
    """–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        if not IMAGES_DIR.exists():
            raise FileNotFoundError("–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
        files = [
            f.name for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
        ]
        if not files:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /kompli ‚Äî –ò —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®"
    )

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {display_name(update.effective_user)}! {pick_emoji()}"
        with open(img_path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=caption)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE ===
from telegram import InlineQueryResultArticle, InputTextMessageContent
from uuid import uuid4

async def inline_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """
    –í –∏–Ω–ª–∞–π–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º.
    –ü–æ —Ç–∞–ø—É ‚Äî –≤ —á–∞—Ç –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
    """
    user = update.effective_user
    name = f"@{user.username}" if user and user.username else (user.first_name or "–¥—Ä—É–≥")
    text = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {name}! {pick_emoji()}"

    result = InlineQueryResultArticle(
        id=str(uuid4()),
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è",
        description=text,  # —Å—Ç—Ä–æ–∫–∞, –≤–∏–¥–∏–º–∞—è –≤ –ø—Ä–µ–≤—å—é
        input_message_content=InputTextMessageContent(text),  # —á—Ç–æ –≤—Å—Ç–∞–≤–∏—Ç—Å—è –≤ —á–∞—Ç
    )

    # –û—Ç–≤–µ—á–∞–µ–º –¥–∞–∂–µ –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (@noskompli_bot‚ê£), —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –ø–ª–∏—Ç–∫–∞
    await update.inline_query.answer([result], cache_time=0, is_personal=True)


def main():
    if not TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN (—Å–µ–∫—Ä–µ—Ç Fly).")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("kompli", cmd_kompli))
    app.add_handler(InlineQueryHandler(inline_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: /kompli –∏ inline (@–±–æ—Ç)")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
