import os
import random
from uuid import uuid4
from pathlib import Path

from telegram import Update, User, InlineQueryResultPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")  
IMAGES_DIR = Path("images")  


GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

# —Ä–æ—Ç–∞—Ü–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
_queue: list[str] = []

def next_image() -> Path:
    """–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        if not IMAGES_DIR.exists():
            raise FileNotFoundError("–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
        files = [
            f.name for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
        ]
        if not files:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /kompli ‚Äî –ò —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®"
    )

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {display_name(update.effective_user)}! {pick_emoji()}"
        with open(img_path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=caption)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE  ===
from urllib.parse import quote
from uuid import uuid4
from telegram import InlineQueryResultPhoto

GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

async def inline_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏–Ω–ª–∞–π–Ω-–≤—ã–±–æ—Ä–µ. –ö–∞–∂–¥—ã–π —Ä–∞–∑ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ—ë
    —Å –Ω–æ–≤–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id, —á—Ç–æ–±—ã Telegram –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–ª.
    –ü–æ —Ç–∞–ø—É –≤ —á–∞—Ç —É—Ö–æ–¥–∏—Ç —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å.
    """
    # (–ø–ª–∏—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ '@noskompli_bot ')
    _ = (update.inline_query.query or "").strip()

    # –±–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ —Å—Ç—Ä–æ–∏–º –ø—É–±–ª–∏—á–Ω—ã–π raw-URL
    local_path = next_image()
    filename = quote(local_path.name)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—É
    # –¥–æ–±–∞–≤–ª—è–µ–º "—Å–æ–ª—å" –≤ URL, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ CDN-–∫–µ—à Telegram
    bust = uuid4().hex
    public_url = f"{GITHUB_RAW_BASE}/{filename}?v={bust}"

    caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {display_name(update.effective_user)}! {pick_emoji()}"

    result = InlineQueryResultPhoto(
        id=str(uuid4()),              # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        photo_url=public_url,         # –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏–º
        thumb_url=public_url,         # –ø—Ä–µ–≤—å—é (–º–æ–∂–Ω–æ —Ç—É –∂–µ —Å—Å—ã–ª–∫—É)
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è",               # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∏—Ç–∫–∏
        description="–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é ‚ú®", # –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        caption=caption,              # –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ
    )

    # cache_time=0 –∏ is_personal=True ‚Äî –ø—Ä–æ—Å–∏–º Telegram –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.inline_query.answer([result], cache_time=0, is_personal=True)




def main():
    if not TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN (—Å–µ–∫—Ä–µ—Ç Fly).")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("kompli", cmd_kompli))
    app.add_handler(InlineQueryHandler(inline_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: /kompli –∏ inline (@–±–æ—Ç)")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

