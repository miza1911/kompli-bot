import os
import random
from uuid import uuid4
from pathlib import Path

from telegram import Update, User, InlineQueryResultPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")                       # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Fly secrets)
IMAGES_DIR = Path("images")                      # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è /kompli
# RAW-URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —Ç–µ–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤:
GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

_queue: list[str] = []

def next_image() -> Path:
    """–í–µ—Ä–Ω—ë—Ç –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        files = [
            f.name for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
        ]
        if not files:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

def make_caption(u: User) -> str:
    return f"{display_name(u)}: –¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è {pick_emoji()}"


# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /kompli ‚Äî –ò —è –ø—Ä–∏—à–ª—é —Ç–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®")

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = make_caption(update.effective_user)
        with open(img_path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=caption)  # –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE (@–±–æ—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ) ‚Äî –±–µ–∑ –∫–Ω–æ–ø–æ–∫ ===
# ... –≤–Ω—É—Ç—Ä–∏ inline_handler, –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ results:
caption = make_caption(update.effective_user)

if is_gif(p):
    results.append(
        InlineQueryResultGif(
            id=str(uuid4()),
            gif_url=public_url,
            thumb_url=public_url,
            caption=caption,
            # üëá —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ –ø—Ä–µ–≤—å—é –≤ —Å–ø–∏—Å–∫–µ
            title=caption
        )
    )
else:
    results.append(
        InlineQueryResultPhoto(
            id=str(uuid4()),
            photo_url=public_url,
            thumb_url=public_url,
            caption=caption,
            # üëá —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ –ø—Ä–µ–≤—å—é –≤ —Å–ø–∏—Å–∫–µ
            title=caption
        )
    )


if __name__ == "__main__":
    main()


