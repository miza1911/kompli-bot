import os
import random
from uuid import uuid4
from pathlib import Path
from urllib.parse import quote

from telegram import Update, User, InlineQueryResultPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")  
IMAGES_DIR = Path("images")  


GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

# —Ä–æ—Ç–∞—Ü–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
_queue: list[str] = []

def next_image() -> Path:
    """–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        if not IMAGES_DIR.exists():
            raise FileNotFoundError("–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
        files = [
            f.name for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
        ]
        if not files:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /kompli ‚Äî –ò —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®"
    )

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {display_name(update.effective_user)}! {pick_emoji()}"
        with open(img_path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=caption)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE  ===
async def inline_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    # –¥–∞–∂–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ '@noskompli_bot ' –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∏—Ç–∫—É
    _ = (update.inline_query.query or "")

    # –±–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ —Ç–≤–æ–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
    local_path = next_image()
    filename = quote(local_path.name)              # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—É
    bust = uuid4().hex                             # "—Å–æ–ª—å" –ø—Ä–æ—Ç–∏–≤ –∫–µ—à–∞
    public_url = f"{GITHUB_RAW_BASE}/{filename}?v={bust}"

    caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {display_name(update.effective_user)}! {pick_emoji()}"

    result = InlineQueryResultPhoto(
        id=str(uuid4()),                           # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        photo_url=public_url,
        thumb_url=public_url,
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è",          # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∏—Ç–∫–∏
        description="–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é ‚ú®",
        caption=caption                            # –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ —É /kompli
    )

    # –±–µ–∑ –∫–µ—à–∞, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—ã–ª–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞/–∫–∞—Ä—Ç–∏–Ω–∫–∞
    await update.inline_query.answer([result], cache_time=0, is_personal=True)



def main():
    if not TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN (—Å–µ–∫—Ä–µ—Ç Fly).")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("kompli", cmd_kompli))
    app.add_handler(InlineQueryHandler(inline_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: /kompli –∏ inline (@–±–æ—Ç)")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

