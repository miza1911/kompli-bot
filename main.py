import os
import random
from uuid import uuid4
from pathlib import Path

from telegram import (
    Update, User, InlineQueryResultPhoto,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")  # –Ω–∞ Fly —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Secrets
IMAGES_DIR = Path("images")  # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è /kompli

# –í–ê–ñ–ù–û: public RAW-URL (–∞ –Ω–µ /tree/). –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
GITHUB_RAW_BASE = "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

# –û—á–µ—Ä–µ–¥—å –¥–ª—è "–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤"
_queue: list[str] = []

def _list_image_files() -> list[str]:
    if not IMAGES_DIR.exists():
        raise FileNotFoundError("–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä—è–¥–æ–º —Å main.py")
    files = [
        f.name for f in IMAGES_DIR.iterdir()
        if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
    ]
    if not files:
        raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
    return files

def next_image() -> Path:
    """–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        files = _list_image_files()
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞: /kompli ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®\n"
        
    )

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = f"{pick_emoji()} {display_name(update.effective_user)}"
        with open(img_path, "rb") as f:
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ï—â—ë ‚ú®", switch_inline_query_current_chat="kompli")
            ]])
            await update.message.reply_photo(photo=f, caption=caption, reply_markup=kb)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE ===
async def inline_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–∞–∂–µ –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É @—É–ø–æ–º–∏–Ω–∞–Ω–∏—é.
    """
    q = (update.inline_query.query or "").strip().lower()

    # –±–µ—Ä—ë–º –∏–º—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏), –∞ —Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é
    local_path = next_image()
    filename = local_path.name

    # –í–ê–ñ–ù–û: –±–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å RAW, –Ω–µ /tree/. –ü—Ä–∏–º–µ—Ä:
    # https://raw.githubusercontent.com/<user>/<repo>/main/images
    public_url = f"{GITHUB_RAW_BASE}/{filename}"

    caption = f"{pick_emoji()} {display_name(update.effective_user)}"

    result = InlineQueryResultPhoto(
        id=str(uuid4()),
        photo_url=public_url,
        thumb_url=public_url,
        caption=caption,
    )

    # cache_time=0 –Ω–∞ –æ—Ç–ª–∞–¥–∫—É; –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ 60‚Äì300
    await update.inline_query.answer([result], cache_time=0, is_personal=True)

def main():
    if not TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN (—Å–µ–∫—Ä–µ—Ç Fly).")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("kompli", cmd_kompli))
    app.add_handler(InlineQueryHandler(inline_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: /kompli –∏ inline (@–±–æ—Ç kompli)")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

