# main.py ‚Äî –æ–¥–∏–Ω —Ñ–∞–π–ª, –≤—Å—ë –≤ –æ–¥–Ω–æ–º: aiogram v3 + FastAPI + inline-–≤—Å–ø–ª—ã–≤–∞—à–∫–∞ + /kompli
import os
import random
import uuid
from telebot import TeleBot, types

TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
bot = TeleBot(TOKEN, parse_mode="HTML")

# --- –≤–∞—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ GitHub (RAW HTTPS —Å—Å—ã–ª–∫–∏) ---
IMAGES = [
    # –ø—Ä–∏–º–µ—Ä—ã: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ raw-—Å—Å—ã–ª–∫–∏
    "https://raw.githubusercontent.com/miza1911/kompli-bot/main/images/photo_2025-09-05_21-49-56.jpg",
   
]

COMPLIMENTS = [
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –±–ª–µ—Å—Ç—è—â–µ –≤—ã–≥–ª—è–¥–∏—à—å ‚ú®",
    "–¢–≤–æ—ë —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ ‚Äî —Ç–æ–ø! üòÑ",
    "–° —Ç–æ–±–æ–π –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª–µ–≥—á–µ üå∏",
]

# --- –ö–æ–º–∞–Ω–¥—ã (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ / ) ---
bot.set_my_commands([
    types.BotCommand("kompli", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è"),
    types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
])

def pick():
    return random.choice(IMAGES), random.choice(COMPLIMENTS)

# --- /kompli: –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
@bot.message_handler(commands=["kompli"])
def cmd_kompli(m):
    img, text = pick()
    bot.send_photo(m.chat.id, img, caption=f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è: {text}")

@bot.message_handler(commands=["help", "start"])
def cmd_help(m):
    bot.reply_to(
        m,
        "–ù–∞–ø–∏—à–∏ /kompli –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π inline:\n"
        "–≤ –ª—é–±–æ–º —á–∞—Ç–µ –≤–≤–µ–¥–∏ @<–∏–º—è_–±–æ—Ç–∞> –∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É."
    )

# --- INLINE MODE: @botname ‚Üí –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π ---
@bot.inline_handler(func=lambda q: True)
def inline(q: types.InlineQuery):
    img, text = pick()
    results = [
        types.InlineQueryResultPhoto(
            id=str(uuid.uuid4()),
            photo_url=img,
            thumb_url=img,
            caption=f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è: {text}"
        )
    ]
    # cache_time=0, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞–º–µ—Ç–Ω—ã —Å—Ä–∞–∑—É
    bot.answer_inline_query(q.id, results=results, cache_time=0, is_personal=True)

bot.polling(none_stop=True)



# ---------- ENV ----------
BOT_TOKEN = os.environ["BOT_TOKEN"]                         # —Å–µ–∫—Ä–µ—Ç –Ω–∞ Fly
PUBLIC_URL = os.environ["PUBLIC_URL"].rstrip("/")          # https://kompli-bot.fly.dev

# ---------- PATHS / IMAGES ----------
ROOT = Path(__file__).parent
IMAGES_DIR = ROOT / "images"                               # –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ /images (–≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ)
IMAGES_DIR.mkdir(parents=True, exist_ok=True)

# ---------- PERSISTENT 'DECK' ----------
DB_PATH = Path(os.getenv("DB_PATH", str(ROOT / "deck_state.sqlite3")))
DB_PATH.parent.mkdir(parents=True, exist_ok=True)
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.execute("""
CREATE TABLE IF NOT EXISTS deck (
  id INTEGER PRIMARY KEY CHECK (id = 1),
  order_json TEXT NOT NULL,
  idx INTEGER NOT NULL
)
""")
conn.commit()

def _discover_images() -> List[str]:
    """–í–µ—Ä–Ω—ë–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL '/images/...'; –ª—é–±—ã–µ –∏–º–µ–Ω–∞/–ø–æ–¥–ø–∞–ø–∫–∏, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –æ–∫."""
    exts = {".jpg", ".jpeg", ".png", ".webp", ".gif"}
    files: List[str] = []
    for p in IMAGES_DIR.rglob("*"):
        if p.is_file() and p.suffix.lower() in exts and not p.name.startswith("."):
            rel = p.relative_to(ROOT).as_posix()   # 'images/—Ñ–∞–π–ª 1.png'
            files.append(f"/{rel}")                # '/images/—Ñ–∞–π–ª 1.png'
    return files

def _init_deck():
    cur = conn.execute("SELECT order_json, idx FROM deck WHERE id = 1")
    if cur.fetchone() is None:
        order = _discover_images()
        random.shuffle(order)
        conn.execute("INSERT INTO deck(id, order_json, idx) VALUES (1, ?, 0)", (json.dumps(order),))
        conn.commit()

def _next_image_url() -> Optional[str]:
    """–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–ª–æ–¥—ã; –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å –∏ –ø–æ –∫—Ä—É–≥—É."""
    _init_deck()
    cur = conn.execute("SELECT order_json, idx FROM deck WHERE id = 1")
    order_json, idx = cur.fetchone()
    order = json.loads(order_json)

    disk = _discover_images()
    if set(order) != set(disk):
        order = disk
        random.shuffle(order)
        idx = 0

    if not order:
        conn.execute("UPDATE deck SET order_json = ?, idx = 0 WHERE id = 1", (json.dumps(order),))
        conn.commit()
        return None

    if idx >= len(order):
        random.shuffle(order)
        idx = 0

    rel = order[idx]                               # '/images/–ø–æ–¥–ø–∞–ø–∫–∞/—Ñ–∞–π–ª 1.png'
    rel_quoted = "/" + quote(rel.lstrip("/"))      # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—É
    url = f"{PUBLIC_URL}{rel_quoted}"

    idx += 1
    conn.execute("UPDATE deck SET order_json = ?, idx = ? WHERE id = 1", (json.dumps(order), idx))
    conn.commit()
    return url

# ---------- TELEGRAM ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

START_TEXT = "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞: /kompli ‚Äî –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! ‚ú®"

@dp.message(Command("start"))
async def on_start(m: types.Message):
    await m.answer(START_TEXT)

@dp.message(Command("kompli"))
async def on_kompli(m: types.Message):
    url = _next_image_url()
    if not url:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–æ–±–∞–≤—å —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ –≤ –ø–∞–ø–∫—É /images")
        return
    uname = f"@{(m.from_user.username or m.from_user.full_name).replace(' ', '_')}"
    caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {uname} üå∏"
    try:
        await m.answer_photo(photo=url, caption=caption)
    except TelegramBadRequest:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# ---------- INLINE (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ @–±–æ—Ç‚éµ) ----------
from aiogram.types import (
    InlineQuery, InlineQueryResultPhoto,
    InlineQueryResultArticle, InputTextMessageContent
)

@dp.inline_query()
async def on_inline(q: InlineQuery):
    url = _next_image_url()
    if not url:
        await q.answer(
            results=[],
            switch_pm_text="–î–æ–±–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ /images",
            switch_pm_parameter="noimages",
            cache_time=1,
            is_personal=True,
        )
        return

    uname = f"@{(q.from_user.username or q.from_user.full_name).replace(' ', '_')}"
    caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {uname} üåº"

    # 1) ¬´–°–µ—Ä–∞—è¬ª –ø–ª–∏—Ç–∫–∞ (Article) ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞–Ω–∏—è
    article = InlineQueryResultArticle(
        id=str(uuid.uuid4()),
        title="–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è",
        description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é",
        input_message_content=InputTextMessageContent(
            "–í—ã–±–∏—Ä–∞–π –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∏–∂–µ üëá (—ç—Ç–æ –ø–ª–∏—Ç–∫–∞ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—à–∫–∏)"
        ),
    )

    # 2) –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    photo = InlineQueryResultPhoto(
        id=str(uuid.uuid4()),
        photo_url=url,
        thumb_url=url,
        caption=caption,
        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",      # –Ω–µ –≤–µ–∑–¥–µ –≤–∏–¥–Ω–æ, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç
        description="–ö–∞—Ä—Ç–∏–Ω–∫–∞ + –ø–æ–¥–ø–∏—Å—å",
    )

    # –°–Ω–∞—á–∞–ª–∞ –ø–ª–∏—Ç–∫–∞, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ
    await q.answer([article, photo], cache_time=1, is_personal=True)

# ---------- FASTAPI / WEBHOOK ----------
app = FastAPI()
app.mount("/images", StaticFiles(directory=IMAGES_DIR), name="images")

@app.get("/", response_class=PlainTextResponse)
def health():
    return "ok"

@app.post(f"/webhook/{{token}}")
async def telegram_webhook(request: Request, token: str):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–ø–¥–µ–π—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –≤ –ø—É—Ç–∏
    if token != BOT_TOKEN:
        return {"ok": False}
    try:
        payload = await request.json()
        update = types.Update.model_validate(payload)  # aiogram 3.x
        await dp.feed_update(bot, update)
    except Exception:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –≤–µ–±—Ö—É–∫ 500-–∫–æ–π ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200/ok
        return {"ok": True}
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ inline
    await bot.set_webhook(
        f"{PUBLIC_URL}/webhook/{BOT_TOKEN}",
        allowed_updates=["message", "inline_query", "callback_query"],
        drop_pending_updates=False,
    )
