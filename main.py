import os
import random
from uuid import uuid4
from pathlib import Path

from telegram import (
    Update, User, InlineQueryResultPhoto,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")  # –Ω–∞ Fly —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Secrets
IMAGES_DIR = Path("images")  # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è /kompli
# –í–°–¢–ê–í–¨ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π raw-URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —Ç–µ–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤:
GITHUB_RAW_BASE = "https://github.com/miza1911/kompli-bot/tree/main/images"

EMOJI_POOL = list("‚ú®üåüüí´‚òÄÔ∏èüåàüî•üå∏‚≠êÔ∏èüåºüåªüåôüíéüíñüíöüíôüíúü§çü§é")

# —Ä–æ—Ç–∞—Ü–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤
_queue: list[str] = []

def next_image() -> Path:
    """–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    global _queue
    if not _queue:
        files = [
            f.name for f in IMAGES_DIR.iterdir()
            if f.is_file() and f.suffix.lower() in {".jpg", ".jpeg", ".png", ".gif"}
        ]
        if not files:
            raise FileNotFoundError("–í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫")
        random.shuffle(files)
        _queue = files
    return IMAGES_DIR / _queue.pop()

def pick_emoji() -> str:
    return random.choice(EMOJI_POOL)

def display_name(u: User) -> str:
    return f"@{u.username}" if u and u.username else (u.first_name if u and u.first_name else "–¥—Ä—É–≥")

# === –ö–û–ú–ê–ù–î–´ ===
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞: /kompli ‚Äî –ò —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è!‚ú® \n"
         "
    )

async def cmd_kompli(update: Update, _: ContextTypes.DEFAULT_TYPE):
    try:
        img_path = next_image()
        caption = f"{pick_emoji()} {display_name(update.effective_user)}"
        with open(img_path, "rb") as f:
            # –∫–Ω–æ–ø–∫–∞ ‚Äú–ï—â—ë‚Äù –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç inline —Å—Ä–∞–∑—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ï—â—ë ‚ú®", switch_inline_query_current_chat="kompli")
            ]])
            await update.message.reply_photo(photo=f, caption=caption, reply_markup=kb)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === INLINE ===
async def inline_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–¥–∞—ë–º –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø—É–±–ª–∏—á–Ω—ã–º URL –∏–∑ GitHub –∏ —Å –∫–Ω–æ–ø–∫–æ–π ‚Äú–ï—â—ë ‚ú®‚Äù,
    –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç inline –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ.
    """
    q = (update.inline_query.query or "").strip().lower()
    if not q or ("kompli" not in q and "–∫–æ–º–ø–ª–∏" not in q and "compl" not in q):
        # –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å
        return

    # –±–µ—Ä—ë–º –∏–º—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏), –∞ —Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é
    local_path = next_image()
    filename = local_path.name
    public_url = f"{GITHUB_RAW_BASE}/{filename}"

    caption = f"{pick_emoji()} {display_name(update.effective_user)}"

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ï—â—ë ‚ú®", switch_inline_query_current_chat="kompli")
    ]])

    result = InlineQueryResultPhoto(
        id=str(uuid4()),
        photo_url=public_url,
        thumb_url=public_url,
        caption=caption,
        reply_markup=kb,
    )

    # cache_time=0 —É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏; –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 300)
    await update.inline_query.answer([result], cache_time=0, is_personal=True)

def main():
    if not TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN (—Å–µ–∫—Ä–µ—Ç Fly).")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("kompli", cmd_kompli))
    app.add_handler(InlineQueryHandler(inline_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: /kompli –∏ inline (@–±–æ—Ç kompli)")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

