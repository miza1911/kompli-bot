import os
import json
import random
import sqlite3
import uuid
from pathlib import Path
from typing import List
from urllib.parse import quote

from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from fastapi.staticfiles import StaticFiles

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineQuery, InlineQueryResultPhoto
from aiogram.exceptions import TelegramBadRequest



# ---------- ENV ----------
BOT_TOKEN = os.environ["BOT_TOKEN"]              # —Ç–æ–∫–µ–Ω –æ—Ç BotFather
PUBLIC_URL = os.environ["PUBLIC_URL"].rstrip("/")  # –Ω–∞–ø—Ä. https://kompli-bot.fly.dev

# ---------- PATHS / STATIC ----------
ROOT = Path(__file__).parent
IMAGES_DIR = ROOT / "static" / "images"
if not IMAGES_DIR.exists():
    raise RuntimeError("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É app/static/images –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ---------- PERSISTENT 'DECK' STATE ----------
DB_PATH = Path(os.getenv("DB_PATH", str(ROOT / "deck_state.sqlite3")))
DB_PATH.parent.mkdir(parents=True, exist_ok=True)
conn = sqlite3.connect(DB_PATH)
conn.execute("""
CREATE TABLE IF NOT EXISTS deck (
    id INTEGER PRIMARY KEY CHECK (id = 1),
    order_json TEXT NOT NULL,
    idx INTEGER NOT NULL
)
""")
conn.commit()

def _load_images() -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ app/static/images –∏ –ø–æ–¥–ø–∞–ø–æ–∫.
    –•—Ä–∞–Ω–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤–∏–¥–∞ '/static/images/sub/—Ñ–∞–π–ª 1.png'
    """
    exts = {".jpg", ".jpeg", ".png", ".webp", ".gif"}
    files: List[str] = []
    for p in IMAGES_DIR.rglob("*"):
        if (
            p.is_file()
            and p.suffix.lower() in exts
            and not p.name.startswith(".")
        ):
            rel = p.relative_to(ROOT).as_posix()  # 'static/images/—Ñ–∞–π–ª 1.png'
            files.append(f"/{rel}")
    if not files:
        raise RuntimeError("–í app/static/images –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    return files

def _init_deck_if_needed():
    cur = conn.execute("SELECT order_json, idx FROM deck WHERE id = 1")
    if cur.fetchone() is None:
        files = _load_images()
        random.shuffle(files)
        conn.execute(
            "INSERT INTO deck(id, order_json, idx) VALUES (1, ?, 0)",
            (json.dumps(files),),
        )
        conn.commit()

def _get_next_image_url() -> str:
    """–í–µ—Ä–Ω—ë—Ç HTTPS-URL —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏; –Ω–∞ –∫–æ–Ω—Ü–µ —Ç–∞—Å—É–µ—Ç –∏ –∏–¥—ë—Ç –ø–æ –∫—Ä—É–≥—É."""
    _init_deck_if_needed()
    cur = conn.execute("SELECT order_json, idx FROM deck WHERE id = 1")
    order_json, idx = cur.fetchone()
    order = json.loads(order_json)

    # –ï—Å–ª–∏ –Ω–∞–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –¥–∏—Å–∫–µ ‚Äî –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–¥—É
    disk_files = _load_images()
    if set(order) != set(disk_files):
        order = disk_files
        random.shuffle(order)
        idx = 0

    if idx >= len(order):
        random.shuffle(order)
        idx = 0

    rel = order[idx]  # '/static/images/–ø–æ–¥–ø–∞–ø–∫–∞/—Ñ–∞–π–ª 1.png'
    rel_quoted = "/" + quote(rel.lstrip("/"))  # –∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—É
    full_url = f"{PUBLIC_URL}{rel_quoted}"

    idx += 1
    conn.execute(
        "UPDATE deck SET order_json = ?, idx = ? WHERE id = 1",
        (json.dumps(order), idx),
    )
    conn.commit()
    return full_url

# ---------- TELEGRAM ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

START_TEXT = "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞: /kompli ‚Äî –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è! üåû"

@dp.message(Command("start"))
async def on_start(m: types.Message):
    await m.answer(START_TEXT)

@dp.message(Command("kompli"))
async def on_kompli(m: types.Message):
    try:
        url = _get_next_image_url()
        uname = f"@{(m.from_user.username or m.from_user.full_name).replace(' ', '_')}"
        caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {uname} üå∏"
        await m.answer_photo(photo=url, caption=caption)
    except TelegramBadRequest:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")

@dp.inline_query()
async def on_inline(q: InlineQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±—Ä–∞–ª @botname‚éµ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –ø–ª–∏—Ç–∫—É.
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –ü–æ—á—Ç–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à,
    —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å—å –∞–¥—Ä–µ—Å–æ–≤–∞–ª–∞—Å—å –≤—ã–∑–≤–∞–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    url = _get_next_image_url()
    uname = f"@{(q.from_user.username or q.from_user.full_name).replace(' ', '_')}"
    caption = f"–¢–≤–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–Ω—è, {uname} üåº"

    results = [
        InlineQueryResultPhoto(
            id=str(uuid.uuid4()),
            photo_url=url,
            thumb_url=url,
            caption=caption,
        )
    ]
    await q.answer(results=results, cache_time=1, is_personal=True)

# ---------- FASTAPI / WEBHOOK ----------
app = FastAPI()

# –û—Ç–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É (–∫–∞—Ä—Ç–∏–Ω–∫–∏)
app.mount("/static", StaticFiles(directory=ROOT / "static"), name="static")

@app.get("/", response_class=PlainTextResponse)
def health():
    return "ok"

@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(f"{PUBLIC_URL}/webhook/{BOT_TOKEN}")

if __name__ == "__main__":
    main()

